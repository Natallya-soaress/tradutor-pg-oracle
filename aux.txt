%{
#include <stdio.h>
%}

%option noyywrap

LITERAl [a-zA-Z_0-9]+

%% 

"SELECT"                        { printf(" SELECT \n");}
"FROM"                        { printf(" FROM \n");}
"WHERE"                        { printf(" WHERE \n");}
"OR"              {printf(" OR \n");}
"AND"               {printf(" AND \n");}
"*"                 {printf(" ASTERISC \n");}
";"               {printf(" SEMICOLON \n");}
","                 {printf(" COMMA \n");}
"."                 {printf(" PONTO \n");}
"("                 {printf(" LP \n");}
")"                 {printf(" RP \n");}
"["                   {printf(" AC \n");}
"]"                   {printf(" FC \n");}
"="                    {printf(" IGUAL \n");}
">"                    {printf(" MAIOR \n");}
">="                    {printf(" MAIOR_IGUAL \n");}
"<"                    {printf(" MENOR \n");}
"<="                    {printf(" MENOR_IGUAL \n");}
"!="                    {printf(" DIFERENTE \n");}
"+"         { printf("Operador de adição encontrado\n"); }
"-"         { printf("Operador de subtração encontrado\n"); }
"*"         { printf("Operador de multiplicação encontrado\n"); }
"/"         { printf("Operador de divisão encontrado\n"); }
"%"         { printf("Operador de módulo encontrado\n"); }
"--"               {printf(" COMMENT \n");}
"INSERT"                {printf(" INSERT \n");}
"INTO"                   {printf(" INTO \n");}
"VALUES"                   {printf(" VALUES \n");}
"UPDATE"                    {printf(" UPPDATE \n");}
"SET"                   {printf(" SET \n");}
"DELETE"                {printf(" DELETE \n");}
"LIKE"                  {printf(" LIKE \n");}
"LIMIT"                 {printf(" LIMIT \n");}
"OFFSET"                {printf(" OFFSET \n");}
"NOT"                   {printf(" NOT \n");}
"NULL"                  {printf(" NULL \n");}
"PRIMARY"               {printf(" PRIMARY \n");}
"KEY"                   {printf(" KEY \n");}
"UNIQUE"                {printf(" UNIQUE \n");}
"references"            {printf(" fk \n");}
"CHECK"                 {printf(" CHECK \n");}
"CREATE"                {printf(" CREATE \n");}
"ALTER"                {printf(" ALTER \n");}
"TABLE"                {printf(" TABLE \n");}
"CROSS"                {printf(" CROSS \n");}
"INNER"                {printf(" INNER \n");}
"LEFT"                {printf(" LEFT \n");}
"RIGHT"                {printf(" RIGHT \n");}
"FULL"                {printf(" FULL \n");}
"OUTER"                {printf(" OUTER \n");}
"JOIN"                {printf(" JOIN \n");}
"ON"                {printf(" ON \n");}
"AS"                {printf(" AS \n");}
"ADD"                {printf(" ADD \n");}
"DROP"                {printf(" DROP \n");}
"COLUMN"                {printf(" COLUMN \n");}
"MODIFY"                {printf(" MODIFY \n");}
"CONSTRAINT"            {printf(" CONSTRAINT \n");}
"DATABASE"            {printf(" DATABASE \n");}
"GROUP"            {printf(" GROUP \n");}
"ORDER"            {printf(" ORDER \n");}
"BY"            {printf(" BY \n");}
"SMALLINT"  { printf("Tipo de dado SMALLINT encontrado\n"); }
"INTEGER"   { printf("Tipo de dado INTEGER encontrado\n"); }
"BIGINT"    { printf("Tipo de dado BIGINT encontrado\n"); }
"SERIAL"    { printf("Tipo de dado SERIAL encontrado\n"); }
"BIGSERIAL" { printf("Tipo de dado BIGSERIAL encontrado\n"); }
"REAL"      { printf("Tipo de dado REAL encontrado\n"); }
"DOUBLE PRECISION" { printf("Tipo de dado DOUBLE PRECISION encontrado\n"); }
"NUMERIC"   { printf("Tipo de dado NUMERIC encontrado\n"); }
"CHAR"     { printf("Tipo de dado CHAR encontrado\n"); }
"VARCHAR"  { printf("Tipo de dado VARCHAR encontrado\n"); }
"TEXT"      { printf("Tipo de dado TEXT encontrado\n"); }
"DATE"      { printf("Tipo de dado DATE encontrado\n"); }
"TIME"      { printf("Tipo de dado TIME encontrado\n"); }
"TIMESTAMP" { printf("Tipo de dado TIMESTAMP encontrado\n"); }
"INTERVAL"  { printf("Tipo de dado INTERVAL encontrado\n"); }
"BOOLEAN"   { printf("Tipo de dado BOOLEAN encontrado\n"); }
"BYTEA"     { printf("Tipo de dado BYTEA encontrado\n"); }
"INET"      { printf("Tipo de dado INET encontrado\n"); }
"CIDR"      { printf("Tipo de dado CIDR encontrado\n"); }
"POINT"     { printf("Tipo de dado POINT encontrado\n"); }
"LINE"      { printf("Tipo de dado LINE encontrado\n"); }
"LSEG"      { printf("Tipo de dado LSEG encontrado\n"); }
"BOX"       { printf("Tipo de dado BOX encontrado\n"); }
"PATH"      { printf("Tipo de dado PATH encontrado\n"); }
"POLYGON"   { printf("Tipo de dado POLYGON encontrado\n"); }
"CIRCLE"    { printf("Tipo de dado CIRCLE encontrado\n"); }
"INTEGER" { printf("Tipo de dado ARRAY DE INTEIROS encontrado\n"); }
"VARCHAR" { printf("Tipo de dado ARRAY DE VARCHAR encontrado\n"); }
"NUMERIC" { printf("Tipo de dado ARRAY DE NUMERIC encontrado\n"); }
"RECORD"    { printf("Tipo de dado RECORD encontrado\n"); }
{LITERAl}               {printf(" LITERAl \n");}

. {}

%% 


int main() {
    yylex();
    return 0;
}